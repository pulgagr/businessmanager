generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Quote {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  clientId      Int
  product       String
  platform      String
  status        String
  cost          Float
  chargedAmount Float
  notes         String?
  amountPaid    Float      @default(0)
  paymentMethod String?
  trackingId    Int?
  activities    Activity[]
  client        Client     @relation(fields: [clientId], references: [id])
  tracking      Tracking?  @relation(fields: [trackingId], references: [id])
}

model Client {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  email     String     @unique
  phone     String?
  company   String?
  status    String     @default("active")
  address   String?
  city      String?
  country   String?
  idNumber  String?
  state     String?
  taxId     String?
  zipCode   String?
  quotes    Quote[]
  trackings Tracking[]
}

model Activity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  quoteId   Int
  type      String
  amount    Float
  status    String
  quote     Quote    @relation(fields: [quoteId], references: [id])
}

model Settings {
  id                   Int      @id @default(autoincrement())
  companyName          String
  email                String
  phone                String
  address              String
  taxRate              Float
  currency             String
  defaultPlatformFee   Float
  notificationEmail    String
  autoGenerateInvoices Boolean
  platformOptions      String[]
  paymentOptions       String[]
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  logoUrl              String?
}

model Tracking {
  id             Int      @id @default(autoincrement())
  trackingNumber String   @unique
  declaredValue  Float
  shippingCost   Float
  totalValue     Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  clientId       Int
  status         String   @default("pending")
  amountPaid     Float    @default(0)
  quotes         Quote[]
  client         Client   @relation(fields: [clientId], references: [id])
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  name            String
  passwordHash    String
  role            String    @default("user") // Options: admin, user
  lastLogin       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  refreshToken    String?   // For JWT refresh token
  resetToken      String?   // For password reset
  resetTokenExpiry DateTime?
}
